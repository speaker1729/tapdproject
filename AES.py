Rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1B, 0x36]

E_SBox = [0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
          0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
          0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
          0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
          0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
          0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
          0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
          0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
          0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
          0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
          0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
          0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
          0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
          0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
          0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
          0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16]

D_SBox = [0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
          0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
          0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
          0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
          0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
          0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
          0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
          0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
          0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
          0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
          0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
          0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
          0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
          0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
          0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
          0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D]

E_SftR = [0, 5, 10, 15, 4, 9, 14, 3, 8, 13, 2, 7, 12, 1, 6, 11]

D_SftR = [0, 13, 10, 7, 4, 1, 14, 11, 8, 5, 2, 15, 12, 9, 6, 3]

E_MixC = [0x2, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x1, 0x1, 0x1, 0x2, 0x3, 0x3, 0x1, 0x1, 0x2]

D_MixC = [0xe, 0xb, 0xd, 0x9, 0x9, 0xe, 0xb, 0xd, 0xd, 0x9, 0xe, 0xb, 0xb, 0xd, 0x9, 0xe]


class AES:
    # 初始化
    def __init__(self, key: bytes):
        self.Nk = len(key) // 4  # 密钥长度
        self.Nr = 10 + (len(key) - 16) // 4  # 总轮数
        self.Key = self.key_expansion(key)  # 轮密钥

    # 生成轮密钥 不兼容192
    def key_expansion(self, key: bytes) -> list[list[int]]:
        w: list[list[int]] = []
        # 导入初始密钥
        for i in range(self.Nk):
            t: list[int] = []
            for j in range(4):
                t.append(key[i * 4 + j])
            w.append(t)
        # 生成轮密钥
        for i in range(self.Nk, 4 * (self.Nr + 1)):
            temp = w[i - 1].copy()
            if i % self.Nk == 0:
                temp = [temp[1], temp[2], temp[3], temp[0]]
                self.sub_byte(temp, False)
                temp[0] ^= Rcon[i // self.Nk - 1]
            elif self.Nk > 6 and i % self.Nk == 4:
                self.sub_byte(temp, False)
            # 如果不进行拷贝会改变之前的值
            for j in range(4):
                temp[j] ^= w[i - self.Nk][j]
            w.append(temp)
        # 密钥合并
        res: list[list[int]] = []
        for i in range(self.Nr + 1):
            t: list[int] = []
            for j in range(4):
                t.extend(w[i * 4 + j])
            res.append(t)
        # 16个字节一组
        return res

    # 字节替换，按SBox替换输入的16字节
    def sub_byte(self, state: list[int], inv: bool):
        # 生成密钥时长度为4 加解密时长度为16
        for i in range(len(state)):
            if not inv:
                state[i] = E_SBox[state[i]]
            else:
                state[i] = D_SBox[state[i]]

    # 行移位
    def shift_row(self, state: list[int], inv: bool):
        temp: list[int] = []
        for i in range(16):
            if not inv:
                temp.append(state[E_SftR[i]])
            else:
                temp.append(state[D_SftR[i]])
        # 替换原数组
        for i in range(16):
            state[i] = temp[i]

    # 列混淆
    def mix_column(self, state: list, inv: bool):
        res: list[int] = []
        for i in range(4):
            for j in range(4):
                temp: int = 0
                for k in range(4):
                    if not inv:
                        temp ^= self.gf8_mul(E_MixC[4 * j + k], state[4 * i + k])
                    else:
                        temp ^= self.gf8_mul(D_MixC[4 * j + k], state[4 * i + k])
                res.append(temp)
        # 替换原数组
        for i in range(16):
            state[i] = res[i]

    # GF8乘法
    def gf8_mul(self, a: int, b: int) -> int:
        res: int = 0
        while a:
            if a & 1:
                res ^= b
            if b & 0x80:
                b <<= 1
                b ^= 0x1b
            else:
                b <<= 1
            a >>= 1
        return res % 256

    # 轮密钥加
    def add_roundkey(self, state: list, key: list[int]):
        for i in range(16):
            state[i] ^= key[i]

    # 加密函数
    def encrypt(self, text: bytes) -> bytes:
        state: list[int] = list(text)
        self.add_roundkey(state, self.Key[0])
        for t in range(1, self.Nr):
            self.sub_byte(state, False)
            self.shift_row(state, False)
            self.mix_column(state, False)
            self.add_roundkey(state, self.Key[t])
        self.sub_byte(state, False)
        self.shift_row(state, False)
        self.add_roundkey(state, self.Key[self.Nr])
        return bytes(state)

    # 解密函数
    def decrypt(self, text: bytes) -> bytes:
        state: list[int] = list(text)
        self.add_roundkey(state, self.Key[self.Nr])
        for t in range(1, self.Nr):
            self.shift_row(state, True)
            self.sub_byte(state, True)
            self.add_roundkey(state, self.Key[self.Nr-t])
            self.mix_column(state, True)
        self.shift_row(state, True)
        self.sub_byte(state, True)
        self.add_roundkey(state, self.Key[0])
        return bytes(state)

    # PKCS#7填充
    def padding(self, text: bytes, inv: bool) -> bytes:
        if not inv:
            res = text
            num = 16 - len(text)
            for i in range(num):
                res += bytes([num])
            return res
        else:
            res = text
            num = text[-1]
            res = res[:-num]
            return res


# 加密函数接口
def encrypt(key: bytes, text: bytes) -> bytes:
    """
    :param key: 用于加密的密钥长度必须为128位（32字节）或256位（64字节）
    :param text: 读入的文件的二进制格式，是字节流。直接读入不必预处理
    :return: 加密后的文本，字节流形式
    """
    # 初始化，加载加密密钥
    aes = AES(key)
    # 元素为字节串的一维数组
    res = [text[i:i + 16] for i in range(0, len(text), 16)]
    # 刚好是整数
    if len(res[-1]) == 16:
        for i in range(len(res)):
            res[i] = aes.encrypt(res[i])
        res.append(b'\x00')
    # 填充
    else:
        res[-1] = aes.padding(res[-1], False)
        for i in range(len(res)):
            res[i] = aes.encrypt(res[i])
    # 输出
    return b''.join(res)


# 解密函数接口
def decrypt(key: bytes, text: bytes) -> bytes:
    """
    :param key: 用于解密的密钥长度必须为128位（32字节）或256位（64字节）
    :param text: 读入的文件的二进制格式，是字节流。直接读入不必预处理
    :return: 解密后的文本，字节流形式
    """
    # 初始化，加载解密密钥
    aes = AES(key)
    # 元素为字节串的一维数组
    res = [text[i:i + 16] for i in range(0, len(text), 16)]
    # 填充过
    if len(res[-1]) == 16:
        for i in range(len(res)):
            res[i] = aes.decrypt(res[i])
        res[-1] = aes.padding(res[-1], True)
    # 没有填充过
    else:
        res.pop(-1)
        for i in range(len(res)):
            res[i] = aes.decrypt(res[i])
    # 输出
    return b''.join(res)


if __name__ == '__main__':
    key = bytes.fromhex("a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3")
    plaintext = bytes.fromhex("")
    ciphertext = encrypt(key, plaintext)
    print(ciphertext.hex())  # 69c4e0d86a7b0430d8cdb78070b4c55a
    print(decrypt(key, ciphertext).hex())  # 00112233445566778899aabbccddeeff
